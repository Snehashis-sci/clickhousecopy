replicaCount: 2
clusterName: clickhouse-cluster1
logLevel: warning
extraOverrides: |
    <clickhouse>
      <!-- Macros -->
      <macros>
        <shard from_env="CLICKHOUSE_SHARD_ID"></shard>
        <replica from_env="CLICKHOUSE_REPLICA_ID"></replica>
        <layer>{{ include "common.names.fullname" . }}</layer>
      </macros>
      <!-- Log Level -->
      <logger>
        <level>{{ .Values.logLevel }}</level>
      </logger>
      {{- if or (ne (int .Values.shards) 1) (ne (int .Values.replicaCount) 1)}}
      <!-- Cluster configuration - Any update of the shards and replicas requires helm upgrade -->
      <remote_servers>
        <{{ .Values.clusterName }}>
          {{- $shards := $.Values.shards | int }}
          {{- range $shard, $e := until $shards }}
          <shard>
              <internal_replication>true</internal_replication>
              {{- $replicas := $.Values.replicaCount | int }}
              {{- range $i, $_e := until $replicas }}
              <replica>
                  <host>{{ printf "%s-shard%d-%d.%s.%s.svc.%s" (include "common.names.fullname" $ ) $shard $i (include "clickhouse.headlessServiceName" $) (include "common.names.namespace" $) $.Values.clusterDomain }}</host>
                  <port>{{ $.Values.service.ports.tcp }}</port>
                  <user from_env="CLICKHOUSE_ADMIN_USER"></user>
                  <password from_env="CLICKHOUSE_ADMIN_PASSWORD"></password>
              </replica>
              {{- end }}
          </shard>
          {{- end }}
        </{{ .Values.clusterName }}>
      </remote_servers>
      {{- end }}
      {{- if .Values.keeper.enabled }}
      <!-- keeper configuration -->
      <keeper_server>
        {{/*ClickHouse keeper configuration using the helm chart */}}
        <tcp_port>{{ $.Values.containerPorts.keeper }}</tcp_port>
        {{- if .Values.tls.enabled }}
        <tcp_port_secure>{{ $.Values.containerPorts.keeperSecure }}</tcp_port_secure>
        {{- end }}
        <server_id from_env="KEEPER_SERVER_ID"></server_id>
        <log_storage_path>/bitnami/clickhouse/keeper/coordination/log</log_storage_path>
        <snapshot_storage_path>/bitnami/clickhouse/keeper/coordination/snapshots</snapshot_storage_path>

        <coordination_settings>
            <operation_timeout_ms>10000</operation_timeout_ms>
            <session_timeout_ms>30000</session_timeout_ms>
            <raft_logs_level>trace</raft_logs_level>
        </coordination_settings>

        <raft_configuration>
        {{- $nodes := .Values.replicaCount | int }}
        {{- range $node, $e := until $nodes }}
        <server>
          <id>{{ $node | int }}</id>
          <hostname from_env="{{ printf "KEEPER_NODE_%d" $node }}"></hostname>
          <port>{{ $.Values.service.ports.keeperInter }}</port>
        </server>
        {{- end }}
        </raft_configuration>
      </keeper_server>
      {{- end }}
      {{- if or .Values.keeper.enabled .Values.zookeeper.enabled .Values.externalZookeeper.servers }}
      <!-- Zookeeper configuration -->
      <zookeeper>
        {{- if or .Values.keeper.enabled }}
        {{- $nodes := .Values.replicaCount | int }}
        {{- range $node, $e := until $nodes }}
        <node>
          <host from_env="{{ printf "KEEPER_NODE_%d" $node }}"></host>
          <port>{{ $.Values.service.ports.keeper }}</port>
        </node>
        {{- end }}
        {{- else if .Values.zookeeper.enabled }}
        {{/* Zookeeper configuration using the helm chart */}}
        {{- $nodes := .Values.zookeeper.replicaCount | int }}
        {{- range $node, $e := until $nodes }}
        <node>
          <host from_env="{{ printf "KEEPER_NODE_%d" $node }}"></host>
          <port>{{ $.Values.zookeeper.service.ports.client }}</port>
        </node>
        {{- end }}
        {{- else if .Values.externalZookeeper.servers }}
        {{/* Zookeeper configuration using an external instance */}}
        {{- range $node :=.Values.externalZookeeper.servers }}
        <node>
          <host>{{ $node }}</host>
          <port>{{ $.Values.externalZookeeper.port }}</port>
        </node>
        {{- end }}
        {{- end }}
      </zookeeper>
      {{- end }}
      {{- if .Values.tls.enabled }}
      <!-- TLS configuration -->
      <tcp_port_secure from_env="CLICKHOUSE_TCP_SECURE_PORT"></tcp_port_secure>
      <https_port from_env="CLICKHOUSE_HTTPS_PORT"></https_port>
      <openSSL>
          <server>
              {{- $certFileName := default "tls.crt" .Values.tls.certFilename }}
              {{- $keyFileName := default "tls.key" .Values.tls.certKeyFilename }}
              <certificateFile>/bitnami/clickhouse/certs/{{$certFileName}}</certificateFile>
              <privateKeyFile>/bitnami/clickhouse/certs/{{$keyFileName}}</privateKeyFile>
              <verificationMode>none</verificationMode>
              <cacheSessions>true</cacheSessions>
              <disableProtocols>sslv2,sslv3</disableProtocols>
              <preferServerCiphers>true</preferServerCiphers>
              {{- if or .Values.tls.autoGenerated .Values.tls.certCAFilename }}
              {{- $caFileName := default "ca.crt" .Values.tls.certCAFilename }}
              <caConfig>/bitnami/clickhouse/certs/{{$caFileName}}</caConfig>
              {{- else }}
              <loadDefaultCAFile>true</loadDefaultCAFile>
              {{- end }}
          </server>
          <client>
              <loadDefaultCAFile>true</loadDefaultCAFile>
              <cacheSessions>true</cacheSessions>
              <disableProtocols>sslv2,sslv3</disableProtocols>
              <preferServerCiphers>true</preferServerCiphers>
              <verificationMode>none</verificationMode>
              <invalidCertificateHandler>
                  <name>AcceptCertificateHandler</name>
              </invalidCertificateHandler>
          </client>
      </openSSL>
      {{- end }}
      {{- if .Values.metrics.enabled }}
      <!-- Prometheus metrics -->
      <prometheus>
          <endpoint>/metrics</endpoint>
          <port from_env="CLICKHOUSE_METRICS_PORT"></port>
          <metrics>true</metrics>
          <events>true</events>
          <asynchronous_metrics>true</asynchronous_metrics>
      </prometheus>
      {{- end }}
      <listen_host>0.0.0.0</listen_host>
      <listen_host>::</listen_host>
      <listen_try>1</listen_try>
    </clickhouse>
persistence:
    size: 1Gi
# remove this in production
resourcesPreset: small
## @param resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
resources:
    requests:
        cpu: 500m
        memory: 512Mi
    limits:
        cpu: 2000m
        memory: 2048Mi
zookeeper:
    enabled: false
keeper:
    enabled: true
distributeReplicasByZone: true
shards: 1
stringData:
    username: ENC[AES256_GCM,data:KaLrY3uqIA==,iv:XSX3QnZMQ9g540aMjxs+sXk1B/19gmDUqDYKA7iIJgg=,tag:elXBdcFTeLWEbGNU7gNnng==,type:str]
    password: ENC[AES256_GCM,data:BG9j5wqnOty6YqmSdByVhA==,iv:JZnffUldsDKrM7vwz4N4ixeBHyrxoOXyPqkVHfRUy3A=,tag:JZEZfz03G5VBNdvFZFxL+w==,type:str]
service:
    type: NodePort
metrics:
    enabled: true
sops:
    lastmodified: "2025-05-04T07:43:05Z"
    mac: ENC[AES256_GCM,data:VPCBrLD4FZQvkKobSi3o9dWe3Z5oCC+EyAhMmmOAMZIH5r3qNzW7ZywPLmhciINSFe5/ausr1v6qZ5tIc59QwCNwJklKiPoiWeMgGhsUmuRtsYPN3sSGP3rHn7uB2gdxR3NVrLKiddERbElGfXgs4FF7CAd4VToyWovA5SBKDFs=,iv:FCaxqUI6rbGqVqPuBvN7gkMJWnqiGt9RQW3opBXy1Qw=,tag://yGso+05VNbRP0GU3Qwfw==,type:str]
    pgp:
        - created_at: "2025-05-04T07:43:05Z"
          enc: |-
            -----BEGIN PGP MESSAGE-----

            hQIMA/wWhLBt4ffOAQ/9FT6hU2PbZ7GaOZWGBksI08FjO+7FOlPJDlJ5PWLqDTqr
            aat7+mmgg/VjsCZkzNlYB6swZ4jUuXeyFVo7oAPviYmTOwyi3Qcf+oOOpZgVONYs
            mmMnKNnOIjqSqFuxrdmcQuX4v9l5sD+pjm+foYpN9W3yPAexCY18l5HTCHFkT8f4
            aSXsmJtKr/yfR6waO/jWexl/4o/sa41oe7QBZy9Uy/MnJCiRzorY2vFAF/0DTbqA
            uAExjGHKjnoq4Pnw4xEonoX9lsRPb68NwRFXgiOW+4K8Mn64GUA4jjRGNiUpjtcm
            pLaMED24oniVuELjYDWHKlTQsm29foDHee8VpOl3NWqXhQQ0BVDdtLP9mzLZQxXu
            fMOYZpgAS9WWmil8oceHDzEg1h7tpYVzUdsNa/RzifvrHQ/kPG7zW+bulcsJHfcz
            F4ixOuGVCE7FMxDTaMHjXpHdXccbxSZO19FyZquGfVTe2mY4PbhBOH6/iNbGk82r
            3O2uB554wFw+QL9ce6BMh8vUx8/04zzRKKNuSdiKqYqPndn+JHsXqnfTniCzoJxV
            ucY0gvVZ4JvLU5fsQncTomVUEgHJniRV1YDlDgBn2U9AbkgwsFWM/Le9Mp4H964R
            BVGFdS5t7f20lWhquE0dpWmnz4EsTXOU4qEaFwNFRve+SUtFe6TJYd255QGCtknU
            ZgEJAhB3cxJcuii5pJeSuLZU/VHVpdBbJAzkDy0Im4I0bwZXjjT9tK/QOR0vqup6
            e+lQi7sbQ1mGuD2SQJwLA9h/MSFjt377OvGgUKKF83efiDPtVTnJlt4wF78roL4A
            bQhX3BSCeA==
            =coCY
            -----END PGP MESSAGE-----
          fp: EE8F70A28E7C9311F52B77DA9C23BC360AC0E075
    encrypted_regex: ^(data|stringData)$
    version: 3.10.1
